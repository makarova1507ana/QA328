# #Напишите функцию, которая считает количество цифр в числе.
# # Число передаётся в качестве параметра.
# # Сделать подсказку для программиста, что число должно быть типа int, если передается другой тип данных,
# # допускается, что функция работать не будет.
# # Из функции нужно вернуть полученное количество цифр.
# # Например, если передали 3456, количество цифр будет 4.
# def count_numbers(num):
#     if type(num) != int:
#         print("это не целое число")
#     result = str(num).isdigit() #Состоит ли строка из цифр
#     #result1 = num.isspace() #Состоит ли строка из неотображаемых или спецсимволов
#    if result == False:
#         print("Присутствуют буквы и/или спецсимволы, введите число ")
#     else:
#         print("Количество цифр составляет ", len(num))
# num = input("Введите целое число  ")
# count_numbers(num)
# print('2222 222'.isdigit())
# # num = "2222" #num.isdigit() -> true потому что все символы цифры
# #num.isdigit() -> false если будет Хотя бы ОДИН символ  НЕ цифра
# #num.isspace()
#
#
#
# # ----------------------------------------функции------------------------------------------------------ #
# # функция для вычисления площади треугольника
# def calculate_P_triangle(a, b, c):
#     #print(a+b+c) # лучше использовать при отладочной печати
#     return a+b+c# return - возращать значение (числа, строки, списки, объекты  и т.д.)
#
# def calculate_area_triangle(a, b, c):
#     P = calculate_P_triangle(a,b,c)
#     #print('P = ', P)
#     p = P/2
#     return (p*(p-a)*(p-b)*(p-c))**0.5
# a = 10
# b = 10
# c = 10
# # calculate_P_triangle(a,b,c)
# S = calculate_area_triangle(a,b,c)
# print(f'S = {S}')


# --------------------------------------задача----------------------------------- #
# напишите функцию для проверки существования треугольника, используя return

# def is_triangle(a: float, b: float, c: float) -> bool: # это треугольник ?
#     # if a + b > c and a + c > b and b + c > a:
#     #     return True # return точка выхода из функции
#     # return False
#     return a + b > c and a + c > b and b + c > a # вместо закомментированного кода выше
#
#
# def calculate_area_triangle(a: float, b: float, c: float) -> float:  #:int -аннотация к параметру(подсказка) "-> int" - аннотация к return
#     if is_triangle:
#         p = (a+b+c)/2 #
#         return (p*(p-a)*(p-b)*(p-c))**0.5 #
#     return -1 # в случае невалидных значений
# result = is_triangle(1,2, 3)
# s = calculate_area_triangle()#4, 6, 7)
#
# print(result)

# # —------------------------------- Задача —--------------------------------#
# # Создайте функцию для расчета общей стоимости товаров с учетом скидки.
# # Функция должна принимать на вход список цен и процент скидки,
# # а затем возвращать общую стоимость с учетом скидки.
#
# # вход
# # [100, 200, 100], 50
#
# # выход
# # (100+200+100)*(50/100) = 200.00
#
# def calculate_total_cost(prices: list, discount: float) -> float:
#     total_cost = sum(prices) * (discount / 100)
#     return total_cost
#
#
# prices = [100, 200, 100]
# discount = 50
#
# total_cost = calculate_total_cost(prices, discount)
# print("Общая стоимость после скидки", total_cost)

# # —------------------------------- Задача —--------------------------------#
# # начислить баллы по формуле 100 у.е = 10 балл
# def calculate_total_cost(prices: list, discount: float) -> float:
#     total_cost = sum(prices) * (discount / 100)
#     return total_cost
# def get_bonus(money):
#     return money / 10
#
# prices = [100, 200, 100]
# discount = 50
#
# total_cost = calculate_total_cost(prices, discount)
# print("Общая стоимость после скидки:", total_cost)
# print(f"Ваш бонус: {get_bonus(total_cost)}")



#
# #-----------------------------глобальные и локальные переменные-------------------------------------------------------------------#
# # область видимости - это участок кода, в котором эта переменная или какая-либо другая сущность
# # определена и ВИДИМА ПРОГРАММОЙ
# # Локальная переменная - это переменная, которая доступна только в ограниченной области видимости
#
# # def f():
# #     a = 10 # a - локальная переменная
# #     print('a = ', a)
# #
# # f()
# # print('a = ', a) # a - неопределена в этой части программы
#
#
# # -----------------------#
# # Глобальная переменная - это такая переменная, кто видна всем(во всех областях видимости программы)
# def g():
#     print('g()')
#
# def f(n):
#     g() # Почему я могу вызвать эту функцию без global
#     global a # расширение области видимости переменной a
#     while n != 0:
#         a += 1
#         print('a = ', a)#переменная, которая определена на 126
#         n -= 1
# a = 0
# g()
# f(4)
# print('a = ', a) # переменная, которая определена на 126




# --------------------------------------------------------файлы----------------------------------------#
# файл - информация(текст, видео, аудио и т.д.)
# группы файлов для пайтонов:
# * текстовые (это все то, что можно преобразовать к тексту, .txt, .pdf, .xlsx, .csv. .json и т.д.)
# * бинарные ( это все то, что нельзя преобразовать к тексту без потери изначальных, .png, .mp4, .mp3 и т.д.)